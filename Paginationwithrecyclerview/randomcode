package com.example.paginationwithrecyclerview

import android.annotation.SuppressLint
import android.content.Intent
import android.graphics.Color
import android.os.Bundle
import android.os.CountDownTimer
import android.os.Handler
import android.util.Log
import android.view.View
import android.widget.AbsListView
import android.widget.ProgressBar
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import androidx.recyclerview.widget.RecyclerView.OnScrollListener
import com.google.gson.JsonArray
import org.json.JSONArray
import org.json.JSONObject
import retrofit2.Call


class MainActivity : AppCompatActivity() {

    var isScroll = false;
    var currentitems:Int = 0;
    var scroll_out_items:Int = 0;
    var totalitems:Int = 0;
    var ig = 0;
    var index = 0;
    lateinit var data:ArrayList<ItemsViewModel>
    lateinit var datadummy:ArrayList<ItemsViewModel>
    lateinit var adapter:CustomAdapter
    lateinit var progress:ProgressBar
    lateinit var  recyclerview:RecyclerView
    lateinit var manager:LinearLayoutManager
    lateinit var nomoredata:TextView


    @SuppressLint("MissingInflatedId")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        data = ArrayList()
        datadummy = ArrayList()
        recyclerview = findViewById<RecyclerView>(R.id.recyclerview)
        progress = findViewById(R.id.progress);
        nomoredata = findViewById(R.id.nomoredata)

        apiCall()

        logicpart()
//
        recyclerview.addOnScrollListener(object : OnScrollListener() {

            override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {
                super.onScrollStateChanged(recyclerView, newState)

                if (newState == AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL){

                    isScroll = true

                    nomoredata.visibility = View.GONE
                }

            }

            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
                super.onScrolled(recyclerView, dx, dy)

                currentitems = manager.childCount // childCount method call for get current items number display in screen
                totalitems = manager.itemCount // itemCount method call for how many data store in adapter
                scroll_out_items = manager.findFirstVisibleItemPosition()

                Log.d("items","currentitems " + currentitems.toString())
                Log.d("items","totalitems " + totalitems.toString())
                Log.d("items","scroll_out_items " + scroll_out_items.toString())

                if (isScroll && currentitems + scroll_out_items == totalitems ) {

                        var ten = 0;


                        outer@ for(i in 1..10){

                            if (index == data.count()){
                               // progress.setBackgroundColor(Color.BLUE)
                                //progress.visibility = View.GONE

                                nomoredata.visibility = View.VISIBLE
                                isScroll = false
                                break@outer
                            }

                            progress.visibility = View.VISIBLE


                            var d = data.get(index);
                            datadummy.add(d)
                            ten++;

                            index++;

                         //   Toast.makeText(this@MainActivity,"tendata"+ten,Toast.LENGTH_LONG).show()
                            if (ten == 10){

                                Log.d("ten","Donennnnfh")
                                isScroll = false
                                break@outer
                            }
                        }

                       // Toast.makeText(this@MainActivity,"Notify",Toast.LENGTH_LONG).show()

                        val timer = object: CountDownTimer(3000, 1000) {
                            override fun onTick(millisUntilFinished: Long) {

                            }

                            override fun onFinish() {

                                progress.visibility = View.GONE
                                adapter.notifyDataSetChanged()

                            }
                        }
                        timer.start()


                    }
                }


        })
    }

    fun logicpart(){

        val timer = object: CountDownTimer(20000, 1000) {
            override fun onTick(millisUntilFinished: Long) {

            }

            override fun onFinish() {

                for (ig in 0..14){
                    datadummy.add(data.get(index))
                    index++;
                }

                manager = LinearLayoutManager(this@MainActivity);

                recyclerview.layoutManager = manager;

                adapter = CustomAdapter(datadummy)

                recyclerview.adapter = adapter


            }
        }
        timer.start()

    }


    fun apiCall() {

                val requestInterface =
                    APIClient.getClient().create(RequestAPIInterface::class.java)
                val response =
                    requestInterface.fetchData()
                response.enqueue(object : retrofit2.Callback<JsonArray> {
                    override fun onResponse(
                        call: Call<JsonArray>,
                        response: retrofit2.Response<JsonArray>
                    ) {
                        if (response.isSuccessful) {
                            if (response.body() != null) {
                                val resp = response.body()
                                if (resp != null) {
                                    Log.e("dewdewd", resp.toString())
                                    var  dataArray = JSONArray(resp.toString())
                                    for (i in 0 until dataArray.length()) {
                                        val jsonObject: JSONObject = dataArray.getJSONObject(i)
                                        var uid = jsonObject.getString("id")
                                        var title = jsonObject.getString("title")
                                        var body = jsonObject.getString("title")
                                        Log.e("id", uid)

                                        data.add(ItemsViewModel(uid.toInt(),title,body))
                                      // Toast.makeText(this@MainActivity,"dalal"+data.count(),Toast.LENGTH_LONG).show()
                                        progress.visibility = View.GONE
                                    }

                                } else {
                                    //progressDialog.dismiss()
                                    Log.e("dewdewd","null")

                                }
                            }
                        } else {
                            Log.e("dewdewd", "try again")

//                    alertError(getString(R.string.try_again))
                        }
                    }

                    override fun onFailure(call: Call<JsonArray>, t: Throwable) {
                        Log.e("Throwable", t.message.toString())
//                        alertError(t.message.toString())
//                        progressDialog.dismiss()
                    }
                })

        // }
    }
}
